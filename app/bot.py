from functools import wraps
from telegram import Update, ParseMode
from telegram.ext import (
    Updater, 
    CommandHandler, 
    MessageHandler, 
    Filters, 
    CallbackContext
)
from app.config import config
from app.utils import format_message
import logging

logger = logging.getLogger(__name__)

def check_admin(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    @wraps(func)
    def wrapped(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in config.ADMIN_IDS:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        return func(update, context, *args, **kwargs)
    return wrapped

def test_mode(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
    @wraps(func)
    def wrapped(update: Update, context: CallbackContext, *args, **kwargs):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        is_test = context.user_data.get('test_mode', config.TEST_MODE)
        
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω, –Ω–æ TEST_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if is_test and not config.TEST_CHAT_ID:
            update.message.reply_text("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω, –Ω–æ TEST_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤ context
        context.user_data['is_test'] = is_test
        context.user_data['target_chat'] = config.TEST_CHAT_ID if is_test else config.CHANNEL_ID
        
        return func(update, context, *args, **kwargs)
    return wrapped

@check_admin
def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n"
        f"–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç: {config.DEFAULT_FORMAT}\n"
        f"–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω' if config.TEST_MODE else '–≤—ã–∫–ª—é—á–µ–Ω'}"
    )

@check_admin
def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    update.message.reply_text(
        "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/format <—Ç–∏–ø> - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç (markdown/html/modern/plain)\n"
        "/test <on/off> - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ markdown - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Markdown\n"
        "‚Ä¢ html - HTML —Ä–∞–∑–º–µ—Ç–∫–∞\n"
        "‚Ä¢ modern - Discord-–ø–æ–¥–æ–±–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞\n"
        "‚Ä¢ plain - –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º:\n"
        "‚Ä¢ /test on - –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (—Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç)\n"
        "‚Ä¢ /test off - –í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (—Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª)"
    )

@check_admin
def set_format(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /format."""
    if not context.args:
        update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç: markdown, html, modern –∏–ª–∏ plain")
        return

    format_type = context.args[0].lower()
    if format_type not in ['markdown', 'html', 'modern', 'plain']:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return

    context.user_data['format'] = format_type
    update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç: {format_type}")

@check_admin
def toggle_test_mode(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test."""
    if not context.args:
        update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ on –∏–ª–∏ off")
        return

    mode = context.args[0].lower()
    if mode not in ['on', 'off']:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return

    if mode == 'on' and not config.TEST_CHAT_ID:
        update.message.reply_text("‚ùå TEST_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return

    context.user_data['test_mode'] = (mode == 'on')
    update.message.reply_text(
        f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º {'–≤–∫–ª—é—á–µ–Ω' if mode == 'on' else '–≤—ã–∫–ª—é—á–µ–Ω'}\n"
        f"{'–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç' if mode == 'on' else '–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª'}"
    )

@check_admin
@test_mode
def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        format_type = context.user_data.get('format', config.DEFAULT_FORMAT)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç –∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ test_mode
        target_chat = context.user_data['target_chat']
        is_test = context.user_data['is_test']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_text = format_message(update.message.text, format_type)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram
        parse_mode = None
        if format_type == 'html':
            parse_mode = ParseMode.HTML
        elif format_type in ['markdown', 'modern']:
            parse_mode = ParseMode.MARKDOWN_V2
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = context.bot.send_message(
            chat_id=target_chat,
            text=formatted_text,
            parse_mode=parse_mode
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∂–∏–º–µ
        update.message.reply_text(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {'–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ' if is_test else '–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'}!"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def setup_bot(dp):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("format", set_format))
    dp.add_handler(CommandHandler("test", toggle_test_mode))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    logger.info("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")